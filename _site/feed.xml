<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-04T22:32:11+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Felix Sargent</title><subtitle>Software Engineering Leadership | Social Choice Theory</subtitle><entry><title type="html">SF Chronicle: Chaos reigns in San Francisco’s redistricting</title><link href="http://localhost:4000/social%20choice%20theory/2022/04/21/sfchronicle.html" rel="alternate" type="text/html" title="SF Chronicle: Chaos reigns in San Francisco’s redistricting" /><published>2022-04-21T00:00:00+01:00</published><updated>2022-04-21T00:00:00+01:00</updated><id>http://localhost:4000/social%20choice%20theory/2022/04/21/sfchronicle</id><content type="html" xml:base="http://localhost:4000/social%20choice%20theory/2022/04/21/sfchronicle.html"><![CDATA[<section id="article">
    <h2>Chaos reigns in San Francisco’s redistricting. Here’s a better way to do things</h2>
    <p><em>April 21, 2022</em></p>
    <p>After nearly six months, San Francisco’s supposedly independent redistricting process was supposed to be done. Instead, after it had devolved into intense partisan squabbling, the city’s Redistricting Task Force took the unprecedented step of rejecting its final draft plan and blowing its city mandated deadline for setting new boundaries.</p>
    <p>The task force voted 5–4 on April 13 to continue working on a map, and it plans to meet Thursday to consider another draft. It has also been sued over the delay, which could lead to a judge setting new district boundaries.</p>
    <p>San Francisco’s district-based election system demands redrawing supervisorial boundaries every 10 years to account for population change to ensure each district has roughly the same number of people. San Francisco is split into 11 geographic districts. But many groups disagreed with the map that the task force drew. And they went so far as to try to remove three task force members who supported it.</p>
    <p>The new map must evenly distribute San Francisco’s population in accordance with the law. But it comes with compromises that could change the balance of power in City Hall. Progressives are especially concerned that they will lose voting power.</p>
    <p>Redistricting is necessary to ensure that districts are equitably sized as populations change. But why do we divide people geographically? Can’t we find a better way to elect truly representative representatives without dividing people based on arbitrary maps?</p>
    <p>Yes, we can. And the solution is to adopt an election method that results in something called “proportional representation.” But to explain why that solution is best, here’s a bit more about the current situation.</p>
    <p>Unfortunately, there’s no way to draw a map that can be truly fair across all constituencies; trade-offs are a necessity when trying to draw arbitrary borders through communities. Furthermore, districts fundamentally distort the way city government operates. Supervisors in our system inevitably play hot potato over whose district gets projects like homeless shelters, apartment buildings and commercial centers.</p>
    <p>So why do we do it this way?</p>
    <p>From 1900 to 1977, the city didn’t have districts and elected supervisors “at-large” using plurality block voting. That means: If there were five seats open, voters had five votes, no matter the number of candidates. However, the flaw in plurality block voting is that it advantages majority voting blocks and can lead to little to no minority representation.</p>
    <p>Imagine a city of 51% blue voters and 49% green voters with three open seats on their council. If each voter selects their color, each blue candidate will win — now the council is 100% blue.</p>
    <p>To better understand this problem, it’s important to mention Supervisor Harvey Milk. He was elected in 1977 when San Francisco moved to a district election format similar to our current system that finally gave the LGBTQ community in the Castro a chance at representation. After Milk was tragically assassinated by former Supervisor Dan White in 1978, voters repealed district elections, which the New York Times reported “had helped put two blacks and a homosexual on the board of supervisors.”</p>
    <p>It wasn’t until 2000 that San Francisco re-adopted district elections.</p>
    <p>But even well-intentioned district elections still fail to ensure fair and equal representation for all. Minority groups that are geographically spread out do not receive adequate representation, despite having a population sufficient for a seat.</p>
    <p>It’s not a matter of drawing a better map — dividing communities is the problem itself.</p>
    <p>Which brings us back to “proportional representation.”</p>
    <p>Rather than drawing geographic districts, we can use the information voters provide when they vote for candidates to group them into constituencies. Doing so can ensure that the final makeup of the board is representative. A group that is composed of 30% of the population should see 30% of the seats on a council. This is what proportional representation voting methods do.</p>
    <p>The Asian American community is particularly disenfranchised by the proposed changes to voting maps. In the original final draft, the Asian American population drops by 2.61% in District Seven (west of Twin Peaks) while the white population is boosted by 2.42%. Small changes like these can impact the outcome of an election.</p>
    <p>Rather than arbitrarily focusing on geography, proportional methods ensure a fully diverse board without cutting up the city, further ghettoizing neighborhoods and starving others of development. It is a method that has ensured diversity and representation in 85 countries that have adopted it.</p>
    <p>Proportional representation is a goal and can be achieved through various methods.</p>
    <p>My preferred method is proportional approval voting. Voters can pick as many candidates as they like on the ballot. The candidate with the most votes wins the first seat. As the voters for that seated candidate are represented, the voting power of their ballots are reduced. To determine who gets the next seat, the ballots are recounted, and the candidate with the most votes is seated. The process starts again until all seats on the board are filled. The result is a board that matches the voting demographics of the city exactly, rather than a poor approximation.</p>
    <p>Time will tell whether it’s politically viable to get rid of districts entirely, but a middle-ground solution would be to add more supervisors to the board and elect those new members proportionally. That would keep our existing districts while ensuring a true representation of San Francisco’s diversity.</p>
    <p><em>Felix Sargent is the chair of the Center for Election Science, a national nonprofit with the mission to empower people with voting methods that strengthen democracy.</em></p>
    <p><em>Originally published at https://www.sfchronicle.com on April 21, 2022.</em></p>
</section>]]></content><author><name></name></author><category term="Social Choice Theory" /><summary type="html"><![CDATA[Chaos reigns in San Francisco’s redistricting. Here’s a better way to do things April 21, 2022 After nearly six months, San Francisco’s supposedly independent redistricting process was supposed to be done. Instead, after it had devolved into intense partisan squabbling, the city’s Redistricting Task Force took the unprecedented step of rejecting its final draft plan and blowing its city mandated deadline for setting new boundaries. The task force voted 5–4 on April 13 to continue working on a map, and it plans to meet Thursday to consider another draft. It has also been sued over the delay, which could lead to a judge setting new district boundaries. San Francisco’s district-based election system demands redrawing supervisorial boundaries every 10 years to account for population change to ensure each district has roughly the same number of people. San Francisco is split into 11 geographic districts. But many groups disagreed with the map that the task force drew. And they went so far as to try to remove three task force members who supported it. The new map must evenly distribute San Francisco’s population in accordance with the law. But it comes with compromises that could change the balance of power in City Hall. Progressives are especially concerned that they will lose voting power. Redistricting is necessary to ensure that districts are equitably sized as populations change. But why do we divide people geographically? Can’t we find a better way to elect truly representative representatives without dividing people based on arbitrary maps? Yes, we can. And the solution is to adopt an election method that results in something called “proportional representation.” But to explain why that solution is best, here’s a bit more about the current situation. Unfortunately, there’s no way to draw a map that can be truly fair across all constituencies; trade-offs are a necessity when trying to draw arbitrary borders through communities. Furthermore, districts fundamentally distort the way city government operates. Supervisors in our system inevitably play hot potato over whose district gets projects like homeless shelters, apartment buildings and commercial centers. So why do we do it this way? From 1900 to 1977, the city didn’t have districts and elected supervisors “at-large” using plurality block voting. That means: If there were five seats open, voters had five votes, no matter the number of candidates. However, the flaw in plurality block voting is that it advantages majority voting blocks and can lead to little to no minority representation. Imagine a city of 51% blue voters and 49% green voters with three open seats on their council. If each voter selects their color, each blue candidate will win — now the council is 100% blue. To better understand this problem, it’s important to mention Supervisor Harvey Milk. He was elected in 1977 when San Francisco moved to a district election format similar to our current system that finally gave the LGBTQ community in the Castro a chance at representation. After Milk was tragically assassinated by former Supervisor Dan White in 1978, voters repealed district elections, which the New York Times reported “had helped put two blacks and a homosexual on the board of supervisors.” It wasn’t until 2000 that San Francisco re-adopted district elections. But even well-intentioned district elections still fail to ensure fair and equal representation for all. Minority groups that are geographically spread out do not receive adequate representation, despite having a population sufficient for a seat. It’s not a matter of drawing a better map — dividing communities is the problem itself. Which brings us back to “proportional representation.” Rather than drawing geographic districts, we can use the information voters provide when they vote for candidates to group them into constituencies. Doing so can ensure that the final makeup of the board is representative. A group that is composed of 30% of the population should see 30% of the seats on a council. This is what proportional representation voting methods do. The Asian American community is particularly disenfranchised by the proposed changes to voting maps. In the original final draft, the Asian American population drops by 2.61% in District Seven (west of Twin Peaks) while the white population is boosted by 2.42%. Small changes like these can impact the outcome of an election. Rather than arbitrarily focusing on geography, proportional methods ensure a fully diverse board without cutting up the city, further ghettoizing neighborhoods and starving others of development. It is a method that has ensured diversity and representation in 85 countries that have adopted it. Proportional representation is a goal and can be achieved through various methods. My preferred method is proportional approval voting. Voters can pick as many candidates as they like on the ballot. The candidate with the most votes wins the first seat. As the voters for that seated candidate are represented, the voting power of their ballots are reduced. To determine who gets the next seat, the ballots are recounted, and the candidate with the most votes is seated. The process starts again until all seats on the board are filled. The result is a board that matches the voting demographics of the city exactly, rather than a poor approximation. Time will tell whether it’s politically viable to get rid of districts entirely, but a middle-ground solution would be to add more supervisors to the board and elect those new members proportionally. That would keep our existing districts while ensuring a true representation of San Francisco’s diversity. Felix Sargent is the chair of the Center for Election Science, a national nonprofit with the mission to empower people with voting methods that strengthen democracy. Originally published at https://www.sfchronicle.com on April 21, 2022.]]></summary></entry><entry><title type="html">Sign your git commits using your Yubikey + GPG (OS X)</title><link href="http://localhost:4000/technical/2021/10/27/yubikey-gpg.html" rel="alternate" type="text/html" title="Sign your git commits using your Yubikey + GPG (OS X)" /><published>2021-10-27T00:00:00+01:00</published><updated>2021-10-27T00:00:00+01:00</updated><id>http://localhost:4000/technical/2021/10/27/yubikey-gpg</id><content type="html" xml:base="http://localhost:4000/technical/2021/10/27/yubikey-gpg.html"><![CDATA[<h2 id="sign-your-git-commits-using-your-yubikey--gpg-os-x">Sign your git commits using your Yubikey + GPG (OS X)</h2>

<p><em>October 27, 2021</em></p>

<p>Using GPG can feel like a miniature nightmare of being stuck in a maze. There are too many options, and it’s hard to know which are “safe” or reasonable. In our organization we wanted to ensure that all our commits were signed so that we could trust that the code in our repositories were ours.</p>

<p>This is a guide to set it up Yubikeys and GPG Suite from scratch.</p>

<h3 id="1-installation">1. Installation</h3>

<p>First off, using Homebrew, install git, ykman (Yubikey Manager) and gpg-suite.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>git ykman gpg-suite
</code></pre></div></div>

<h3 id="2-key-generation">2. Key Generation</h3>

<p>Ensure you have your Yubikey plugged in now.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--card-edit</span>
</code></pre></div></div>

<p>This will output something like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Reader ...........: Yubico YubiKey OTP FIDO CCID
Application ID ...: D2760001240103040006169214170000
Application type .: OpenPGP
Version ..........: 3.4
Manufacturer .....: Yubico
Serial number ....: 16921417
Name of cardholder: [not set]
Language prefs ...: [not set]
Salutation .......:
URL of public key : [not set]
Login data .......: [not set]
Signature PIN ....: not forced
Key attributes ...: rsa2048 rsa2048 rsa2048
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 0 3
Signature counter : 0
KDF setting ......: off
Signature key ....: [none]
Encryption key....: [none]
Authentication key: [none]
General key info..: [none]
</code></pre></div></div>

<p>Now, enter admin mode:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg/card&gt; admin
Admin commands are allowed
</code></pre></div></div>

<p>We’re now in the GPG card editor, and we’re going to start generating a key on the yubikey itself.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg/card&gt; generate
Make off-card backup of encryption key? (Y/n) y
</code></pre></div></div>

<p>Please note that the factory settings of the PINs are <code class="language-plaintext highlighter-rouge">PIN = '123456'</code> and <code class="language-plaintext highlighter-rouge">Admin PIN = '12345678'</code>. You should change them using the <code class="language-plaintext highlighter-rouge">passwd</code> command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Please specify how long the key should be valid.
0 = key does not expire
&lt;n&gt;  = key expires in n days
&lt;n&gt;w = key expires in n weeks
&lt;n&gt;m = key expires in n months
&lt;n&gt;y = key expires in n years
Key is valid for? (0) 2y
Key expires at Fri Oct 27 11:59:03 2023 PDT
Is this correct? (y/N) y

GnuPG needs to construct a user ID to identify your key.

Real name: Felix Sargent
Email address: felix@example.com
Comment: Yubikey for Example
You selected this USER-ID:
    "Felix Sargent (Yubikey for Example) &lt;felix@example.com&gt;"

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: Note: backup of card key saved to '/Users/felix/.gnupg/sk_758CFF2393B22B10.gpg'
gpg: key 1DD85DE9D27C4A68 marked as ultimately trusted
gpg: revocation certificate stored as '/Users/felix/.gnupg/openpgp-revocs.d/73C92609075C87FB8545214E1DD85DE9D27C4A68.rev'
public and secret key created and signed.
</code></pre></div></div>

<h3 id="3-upload-public-key-to-github">3. Upload Public Key to GitHub</h3>

<p>Now that’s done, open up the GPG-Keychain application in <code class="language-plaintext highlighter-rouge">/Applications/GPG-Keychain.app</code>. Export your public key to your desktop. It’ll be an <code class="language-plaintext highlighter-rouge">.asc</code> file. <strong>Do not export the private key.</strong></p>

<p>Back to the terminal. See what’s in the <code class="language-plaintext highlighter-rouge">.asc</code> file using <code class="language-plaintext highlighter-rouge">cat</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/Documents/Felix<span class="se">\\</span> Sargent<span class="se">\\</span> <span class="se">\\</span><span class="o">(</span>D27C4A68<span class="se">\\</span><span class="o">)</span><span class="se">\\</span> –<span class="se">\\</span> Public.asc
</code></pre></div></div>

<p>This will output your public key block:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-----BEGIN PGP PUBLIC KEY BLOCK-----
mDMEYXmhiRYJKwYBBAHaRw8BAQdAzUGoX8W3VGDm1LVDE9LmIHDK/6KRGIckUQff
K8a7Swe0OUZlbGl4IFNhcmdlbnQgKFl1YmlrZXkgZm9yIFRydWV3b3JrKSA8ZmVs
aXhAdHJ1ZXdvcmsuY29tPoiWBBMWCAA+FiEEc8kmCQdch/uFRSFOHdhd6dJ8SmgF
AmF5oYkCGwMFCQPCZwAFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQHdhd6dJ8
Smi/ygEAsPSluOpRWPOptPYU37iwxBhxt7vQCjqZiNwNSMCLB0AA/RDNXXqv0rVx
nUHysWLKkl5UR5fcTT+sK1a4TMCzp5APuDMEYXmhiRYJKwYBBAHaRw8BAQdA1ALY
TVhlqYUon59rdmmUF99vMpBZ+8eq0oeM/uAaTkKIfgQYFggAJhYhBHPJJgkHXIf7
hUUhTh3YXenSfEpoBQJheaGJAhsgBQkDwmcAAAoJEB3YXenSfEpo7pUA/0dTRqrY
XjQxWsNMB5nni46d82Ed5x8XZ0S8qXso5+DWAP9ebn/UFYdnTaKLUST0wi5X+mXP
A7DT4UTqhg7b02ONCrg4BGF5oYkSCisGAQQBl1UBBQEBB0DZode07GKwgdicUpHL
p+VWeezqPaP95pxGTAPsk+ghbgMBCAeIfgQYFggAJhYhBHPJJgkHXIf7
hUUhTh3YXenSfEpoBQJheaGJAhsMBQkDwmcAAAoJEB3YXenSfEpocEwA/07sid3xhK5L/rIe
SxX0KPtDk/JKODZsxWuxLt+OfGjxAPsFNRMyAcme+go90tkYjlh2+jqVdH1/szzj
npvgZCNTCA==
=CDad
-----END PGP PUBLIC KEY BLOCK-----
</code></pre></div></div>

<p>Copy this to your clipboard, open <a href="https://github.com/settings/keys">https://github.com/settings/keys</a>, click “New GPG Key”, and paste it in.</p>

<h3 id="4-configure-git">4. Configure Git</h3>

<p>Now back in the terminal, we have to tell git to use your Yubikey’s GPG Signing Key. Identify the key using the key ID, which you can find in GPG Suite’s GUI.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> gpg.program gpg
git config <span class="nt">--global</span> user.signingkey D27C4A68
</code></pre></div></div>

<p>Now when ever we make a commit Git will reach out to GPG to sign the commit. You don’t need to touch your Yubikey to do this, but you do need to have it plugged in. Try signing a commit without your yubikey to validate that it’s working properly.</p>

<h3 id="5-hardening">5. Hardening</h3>

<p>You should change the pin on your Yubikey. Instructions for that are here: <a href="https://github.com/drduh/YubiKey-Guide#change-pin">https://github.com/drduh/YubiKey-Guide#change-pin</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--change-pin</span>
</code></pre></div></div>

<p>This will give you a menu:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg: OpenPGP card no. D2760001240102010006055532110000 detected

1 - change PIN
2 - unblock PIN
3 - change Admin PIN
4 - set the Reset Code
Q - quit
</code></pre></div></div>

<p>To require touch to sign:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ykman openpgp keys set-touch aut on <span class="nt">-f</span>
ykman openpgp keys set-touch sig on <span class="nt">-f</span>
ykman openpgp keys set-touch enc on <span class="nt">-f</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Technical" /><summary type="html"><![CDATA[Sign your git commits using your Yubikey + GPG (OS X)]]></summary></entry><entry><title type="html">Get your CA Vaccine Pass into Apple Wallet</title><link href="http://localhost:4000/technical/2021/08/13/ca-vaccine-pass.html" rel="alternate" type="text/html" title="Get your CA Vaccine Pass into Apple Wallet" /><published>2021-08-13T00:00:00+01:00</published><updated>2021-08-13T00:00:00+01:00</updated><id>http://localhost:4000/technical/2021/08/13/ca-vaccine-pass</id><content type="html" xml:base="http://localhost:4000/technical/2021/08/13/ca-vaccine-pass.html"><![CDATA[<section id="article">
    <h2>Get your CA Vaccine Pass into Apple Wallet</h2>
    <p><em>August 13, 2021</em></p>
    <p>I went to the effort to print out my Vaccine QR code, but hang on, isn’t this 2021? Let’s put this into Apple Wallet.</p>
    <ol>
        <li>Step 0: Get your vaccine!</li>
        <li>Get your <a href="https://myvaccinerecord.cdph.ca.gov/">Vaccine QR Code</a></li>
        <li>Download <a href="https://www.pass2u.net/">Pass2U Wallet</a> from the App Store</li>
        <li>In Pass2U Wallet, click the Hamburger menu, select “Pass Store”, Select the “Popular” tab, then search for “Vaccine” and select the CA Digital COVID record.</li>
        <li>You’ll be asked to fill out your details, and scan your QR code. Pass2U will likely ask you for $2. I think it’s worth it.</li>
    </ol>
</section>]]></content><author><name></name></author><category term="Technical" /><summary type="html"><![CDATA[Get your CA Vaccine Pass into Apple Wallet August 13, 2021 I went to the effort to print out my Vaccine QR code, but hang on, isn’t this 2021? Let’s put this into Apple Wallet. Step 0: Get your vaccine! Get your Vaccine QR Code Download Pass2U Wallet from the App Store In Pass2U Wallet, click the Hamburger menu, select “Pass Store”, Select the “Popular” tab, then search for “Vaccine” and select the CA Digital COVID record. You’ll be asked to fill out your details, and scan your QR code. Pass2U will likely ask you for $2. I think it’s worth it.]]></summary></entry><entry><title type="html">Approval Voting Talk at RepresentUS Berkeley</title><link href="http://localhost:4000/social%20choice%20theory/2020/01/14/approval-voting-talk.html" rel="alternate" type="text/html" title="Approval Voting Talk at RepresentUS Berkeley" /><published>2020-01-14T00:00:00+00:00</published><updated>2020-01-14T00:00:00+00:00</updated><id>http://localhost:4000/social%20choice%20theory/2020/01/14/approval-voting-talk</id><content type="html" xml:base="http://localhost:4000/social%20choice%20theory/2020/01/14/approval-voting-talk.html"><![CDATA[<h2 id="approval-voting-talk-at-representus-berkeley">Approval Voting Talk at RepresentUS Berkeley</h2>

<p><em>January 14, 2020</em></p>

<p>Here’s a talk I gave to the RepresentUS Berkeley Chapter about Approval Voting.</p>

<div class="video-container">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/-cnBHiBdNqQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>]]></content><author><name></name></author><category term="Social Choice Theory" /><summary type="html"><![CDATA[Approval Voting Talk at RepresentUS Berkeley]]></summary></entry><entry><title type="html">Fairness in Action — Re-weighted Range Voting and the Berkeley City Council</title><link href="http://localhost:4000/social%20choice%20theory/2019/06/13/fairness-in-planning.html" rel="alternate" type="text/html" title="Fairness in Action — Re-weighted Range Voting and the Berkeley City Council" /><published>2019-06-13T00:00:00+01:00</published><updated>2019-06-13T00:00:00+01:00</updated><id>http://localhost:4000/social%20choice%20theory/2019/06/13/fairness-in-planning</id><content type="html" xml:base="http://localhost:4000/social%20choice%20theory/2019/06/13/fairness-in-planning.html"><![CDATA[<section id="article">
    <h2>Fairness in Action — Re-weighted Range Voting and the Berkeley City Council</h2>
    <p><em>June 13, 2019</em></p>
    <p>Berkeley had a problem. Cars coming off the I-80/580 interchange were overwhelming a narrow residential street, causing delays and accidents. A citizen petitioned the City Council to create a 4 way stop at Gilman St and Peralta Avenue. This was approved by the council, referred to the City staff, and then languished. The city was overwhelmed with requests from the council and constituents and requested that the council prioritize their concerns.</p>
    <p>The Berkeley City Council is made of 8 Districts and the Mayor. Each, except the mayor, has concerns within their district, along with the city-wide concerns. Berkeley was faced with the question of how to prioritize the work for the city government while being fair to each district.</p>
    <p>A council member reached out to the Center for Election Science requesting their recommendations. The method needed to be easy to use for the council members, output a ranked priority for each referral and be fair so that a majority of districts did not dominate the ranking system over a minority of districts. To make a voting system fair, you need to make it proportional. Proportional Representation gets deep into the math quickly, but the easiest way of looking at it is when a district gets its concerns met, it should take a step back and give favor to another district so it can get its concerns met.</p>
    <p>With these considerations in mind, Berkeley implemented Re-weighted Range Voting (RRV). Council members vote 0–5 stars on each item. The item with the highest score gets first place. But something interesting happens for the remaining items — this is where weighting comes in. District voting power boosted in proportion to how little support they gave to previous referrals. A council member who gave the first referral zero stars has twice the voting power as a council member who gave it five stars. For intermediate scores, the effect lies between those limits. The table is re-calculated without the first place item, then the item with the highest score is selected for second place — and so on. But rather than getting bogged down in the math, let’s look at the results.</p>
    <p>Wow! The Install 4-Way Stop at Gilman Street and Peralta Avenue ​referral moved up 14 ranks due to weighting. Why? It had widespread but minor support from the council members, but the weighting helped increase the value of District 1 who only gave 27 stars to the whole ballot, but a whopping 11% of their vote to that issue. Re-weighted Range Voting enables and encourages council members to support items specific to their district without fear of being lost in the shuffle.</p>
    <p>Let’s look at a different scenario. During the most recent council meeting allegations were raised of Re-weighted Range Voting being vulnerable to a “bullet voting” strategy. District 8 chose to spend 100% of their vote share on the Missing Middle Housing Report. The referral moved from 6th place to 2nd place due to re-weighting. The referral had widespread support from the council, or it would not be ranked 6th when unweighted, but District 8’s demonstration of concern allowed it to move incrementally higher. The referral’s high popularity meant that District 8 could have given 58 other referrals five-star ratings without changing the ranking of the housing report. Re-weighted Range Voting encourages voters to contribute their honest feelings on issues. There is little advantage to bullet voting on an item unless that represents your true interests — and sometimes that happens!</p>
    <p>One of the other interesting things I found in the analysis of this data set was that there’s a large difference over how much each district will vote. Both the Mayor and District 3 had opinions on most items. District 3 gave ratings on 94.12% of items and gave only three items zeros stars!</p>
    <p>It’s important to note that voting for every item does not mean that the district was voting unwisely. Voting for all items but one gives the same relative impact to the weighting as voting for no items except one. Council members benefit from voting with nuance.</p>
    <p>This system also allows us to dig deeper into the concerns of individual council members. Let’s pick on the Mayor this time. Here are the Mayor’s prioritized concerns.</p>
    <p>There was a discussion at the most recent council meeting on whether rating should be done by department or not. It’s important for the city to weigh all issues against each other or a coalition could get first place for each individual department before the weighting effect can take hold. Let’s see the Berkeley RRV process from the City Staff’s perspective.</p>
    <p>Last week I testified in support of Re-weighted range voting before the City Council. Re-weighted range voting succeeds at its goal of creating a fair and inclusive way for council members to prioritize referrals to the city staff. While the reweighting formula may feel complicated, it’s the results that matter, and RRV delivers.</p>
    <p>I’m the Chair of the Board for the Center for Election Science. We are a nationally-based, nonpartisan, 501(c)3 nonprofit dedicated to creating a better world through studying and advancing smarter voting methods. We supported a campaign to bring Approval Voting to Fargo, North Dakota in 2018, and are supporting the campaign to bring Approval Voting to St. Louis, Missouri.</p>
    <p>If the above article was interesting to you, I encourage you to subscribe to our newsletter, or better yet, donate to the cause. If you’re interested in bringing RRV, or any other voting method to your city, reach out to us via contact@electionscience.org.</p>
</section>]]></content><author><name></name></author><category term="Social Choice Theory" /><summary type="html"><![CDATA[Fairness in Action — Re-weighted Range Voting and the Berkeley City Council June 13, 2019 Berkeley had a problem. Cars coming off the I-80/580 interchange were overwhelming a narrow residential street, causing delays and accidents. A citizen petitioned the City Council to create a 4 way stop at Gilman St and Peralta Avenue. This was approved by the council, referred to the City staff, and then languished. The city was overwhelmed with requests from the council and constituents and requested that the council prioritize their concerns. The Berkeley City Council is made of 8 Districts and the Mayor. Each, except the mayor, has concerns within their district, along with the city-wide concerns. Berkeley was faced with the question of how to prioritize the work for the city government while being fair to each district. A council member reached out to the Center for Election Science requesting their recommendations. The method needed to be easy to use for the council members, output a ranked priority for each referral and be fair so that a majority of districts did not dominate the ranking system over a minority of districts. To make a voting system fair, you need to make it proportional. Proportional Representation gets deep into the math quickly, but the easiest way of looking at it is when a district gets its concerns met, it should take a step back and give favor to another district so it can get its concerns met. With these considerations in mind, Berkeley implemented Re-weighted Range Voting (RRV). Council members vote 0–5 stars on each item. The item with the highest score gets first place. But something interesting happens for the remaining items — this is where weighting comes in. District voting power boosted in proportion to how little support they gave to previous referrals. A council member who gave the first referral zero stars has twice the voting power as a council member who gave it five stars. For intermediate scores, the effect lies between those limits. The table is re-calculated without the first place item, then the item with the highest score is selected for second place — and so on. But rather than getting bogged down in the math, let’s look at the results. Wow! The Install 4-Way Stop at Gilman Street and Peralta Avenue ​referral moved up 14 ranks due to weighting. Why? It had widespread but minor support from the council members, but the weighting helped increase the value of District 1 who only gave 27 stars to the whole ballot, but a whopping 11% of their vote to that issue. Re-weighted Range Voting enables and encourages council members to support items specific to their district without fear of being lost in the shuffle. Let’s look at a different scenario. During the most recent council meeting allegations were raised of Re-weighted Range Voting being vulnerable to a “bullet voting” strategy. District 8 chose to spend 100% of their vote share on the Missing Middle Housing Report. The referral moved from 6th place to 2nd place due to re-weighting. The referral had widespread support from the council, or it would not be ranked 6th when unweighted, but District 8’s demonstration of concern allowed it to move incrementally higher. The referral’s high popularity meant that District 8 could have given 58 other referrals five-star ratings without changing the ranking of the housing report. Re-weighted Range Voting encourages voters to contribute their honest feelings on issues. There is little advantage to bullet voting on an item unless that represents your true interests — and sometimes that happens! One of the other interesting things I found in the analysis of this data set was that there’s a large difference over how much each district will vote. Both the Mayor and District 3 had opinions on most items. District 3 gave ratings on 94.12% of items and gave only three items zeros stars! It’s important to note that voting for every item does not mean that the district was voting unwisely. Voting for all items but one gives the same relative impact to the weighting as voting for no items except one. Council members benefit from voting with nuance. This system also allows us to dig deeper into the concerns of individual council members. Let’s pick on the Mayor this time. Here are the Mayor’s prioritized concerns. There was a discussion at the most recent council meeting on whether rating should be done by department or not. It’s important for the city to weigh all issues against each other or a coalition could get first place for each individual department before the weighting effect can take hold. Let’s see the Berkeley RRV process from the City Staff’s perspective. Last week I testified in support of Re-weighted range voting before the City Council. Re-weighted range voting succeeds at its goal of creating a fair and inclusive way for council members to prioritize referrals to the city staff. While the reweighting formula may feel complicated, it’s the results that matter, and RRV delivers. I’m the Chair of the Board for the Center for Election Science. We are a nationally-based, nonpartisan, 501(c)3 nonprofit dedicated to creating a better world through studying and advancing smarter voting methods. We supported a campaign to bring Approval Voting to Fargo, North Dakota in 2018, and are supporting the campaign to bring Approval Voting to St. Louis, Missouri. If the above article was interesting to you, I encourage you to subscribe to our newsletter, or better yet, donate to the cause. If you’re interested in bringing RRV, or any other voting method to your city, reach out to us via contact@electionscience.org.]]></summary></entry><entry><title type="html">My Voice is my Passport, Verify Me — Condo Access via Twilio+Voice</title><link href="http://localhost:4000/technical/2019/03/11/voice-passport.html" rel="alternate" type="text/html" title="My Voice is my Passport, Verify Me — Condo Access via Twilio+Voice" /><published>2019-03-11T00:00:00+00:00</published><updated>2019-03-11T00:00:00+00:00</updated><id>http://localhost:4000/technical/2019/03/11/voice-passport</id><content type="html" xml:base="http://localhost:4000/technical/2019/03/11/voice-passport.html"><![CDATA[<section id="article">
    <h2>My Voice is my Passport, Verify Me — Condo Access via Twilio+Voice</h2>
    <p><em>March 11, 2019</em></p>
    <p>It’s been raining a lot in Oakland recently, and somehow the keypad on the condo security panel shorted out and no longer works. This means that my old method of using Twilio to dial a passcode to let me into the building no longer works.</p>
    <p>I can open a call to the Twilio number, but I can’t use dial tones — but what about voice? Surely there’s a solution for speech to text and then it can be like Sneakers!</p>
    <p>Enter Twilio Autopilot. The quickstart is a great way to get up to speed. This article will give you everything you need from there to make the system work by leveraging Twimlets.</p>
    <p>The requirements are:</p>
    <ol>
        <li>Let in callers who know the password by replying with a DTMF #9 dial tone.</li>
        <li>If callers do not reply with the password, have them call my phone number (and I can validate them there).</li>
        <li>Callers should be able to mention my partner’s name and it’ll ring their number instead.</li>
    </ol>
    <p>Once you have your Twilio account, navigate to h[ttps://www.twilio.com/console/autopilot](https://www.twilio.com/console/autopilot) and create an autopilot.</p>
    <p>We’re going to build four tasks. Go to the Task Builder and create your first task “Answer”, “call-A”, “call-B”, and “open-door”</p>
    <p>The secret sauce is in the Open Door script which plays a mp3 version of DTMF9.</p>
    <p>Next, go to Defaults and ensure that assistant initiation is set to “answer” and the fallback will be to call you.</p>
    <p>Next, go to the “Natural Language Router” and create four items, and link them to your tasks.</p>
    <ul>
        <li>“My voice is my passport, verify me” -&gt; Open Door</li>
        <li>“Call Jane -&gt; Call A</li>
        <li>“Call John -&gt; Call B</li>
    </ul>
    <p>To finish everything up, build the voice model in the Natural Language Router panel.</p>
    <p>Give your system a run on the Overview page.</p>
    <p>To connect this to your phone number, go to Channels and select Programmable Voice.</p>
    <p>Create a new TwiML app here: [https://www.twilio.com/console/phone-numbers/runtime/twiml-apps](https://www.twilio.com/console/phone-numbers/runtime/twiml-apps)</p>
    <p>Go to your phone number, and set Configure with to TwiML App, and select ‘open-door’.</p>
    <p>Hit save, and you’re all set. Handoff that phone number to your HOA, and you’re done.</p>
</section>]]></content><author><name></name></author><category term="Technical" /><summary type="html"><![CDATA[My Voice is my Passport, Verify Me — Condo Access via Twilio+Voice March 11, 2019 It’s been raining a lot in Oakland recently, and somehow the keypad on the condo security panel shorted out and no longer works. This means that my old method of using Twilio to dial a passcode to let me into the building no longer works. I can open a call to the Twilio number, but I can’t use dial tones — but what about voice? Surely there’s a solution for speech to text and then it can be like Sneakers! Enter Twilio Autopilot. The quickstart is a great way to get up to speed. This article will give you everything you need from there to make the system work by leveraging Twimlets. The requirements are: Let in callers who know the password by replying with a DTMF #9 dial tone. If callers do not reply with the password, have them call my phone number (and I can validate them there). Callers should be able to mention my partner’s name and it’ll ring their number instead. Once you have your Twilio account, navigate to h[ttps://www.twilio.com/console/autopilot](https://www.twilio.com/console/autopilot) and create an autopilot. We’re going to build four tasks. Go to the Task Builder and create your first task “Answer”, “call-A”, “call-B”, and “open-door” The secret sauce is in the Open Door script which plays a mp3 version of DTMF9. Next, go to Defaults and ensure that assistant initiation is set to “answer” and the fallback will be to call you. Next, go to the “Natural Language Router” and create four items, and link them to your tasks. “My voice is my passport, verify me” -&gt; Open Door “Call Jane -&gt; Call A “Call John -&gt; Call B To finish everything up, build the voice model in the Natural Language Router panel. Give your system a run on the Overview page. To connect this to your phone number, go to Channels and select Programmable Voice. Create a new TwiML app here: [https://www.twilio.com/console/phone-numbers/runtime/twiml-apps](https://www.twilio.com/console/phone-numbers/runtime/twiml-apps) Go to your phone number, and set Configure with to TwiML App, and select ‘open-door’. Hit save, and you’re all set. Handoff that phone number to your HOA, and you’re done.]]></summary></entry><entry><title type="html">Secure Client Side Feature Flags with Launch Darkly + Auth0 Webtasks</title><link href="http://localhost:4000/technical/2019/03/11/feature-flags.html" rel="alternate" type="text/html" title="Secure Client Side Feature Flags with Launch Darkly + Auth0 Webtasks" /><published>2019-03-11T00:00:00+00:00</published><updated>2019-03-11T00:00:00+00:00</updated><id>http://localhost:4000/technical/2019/03/11/feature-flags</id><content type="html" xml:base="http://localhost:4000/technical/2019/03/11/feature-flags.html"><![CDATA[<section id="article">
    <h2>Secure Client Side Feature Flags with Launch Darkly + Auth0 Webtasks</h2>
    <p><em>March 11, 2019</em></p>
    <p>Feature flags are an essential part of the modern web application. Decoupling the activation of features from deployment means there are fewer things to worry about at deploy time, teams can deliver features to customers, and segment features to specific audiences.</p>
    <p>Client Side flags present a security problem — what if a user tries to see what feature flags another user has? A poorly named feature flag might describe unreleased features, or worse expose administrative elements to regular users.</p>
    <p>At MediaMath, we use Launch Darkly for feature flagging. To address the client side flags issue the Launch Darkly Javascript SDK has a Secure Mode feature to only allow users to see flags associated with their accounts. To use Secure Mode conventionally you integrate it into your back end application, exposing an API endpoint to take the user’s name, hash it with a private key, and return it to the client. Sure, this is easy, but why add an unrelated feature to your existing code base when you could leverage your existing authentication provider?</p>
    <p>Auth0 provides Webtask.io, an AWS Lambda-esque service, for running Javascript. Webtasks come with a lot of batteries included if you use Auth0 as your authentication provider, and can validate users tokens for you.</p>
    <pre><code>
const app = new (require('express'))();
const wt = require('webtask-tools');
const crypto = require('crypto'); // Be sure to specify your SDK key for your environment! app.get('/', (req, res) =&gt; {
  const hmac = crypto.createHmac('sha256',
    req.webtaskContext.secrets.LD_SDK_KEY);
  hmac.update(req.user.email);
  req.user.ld_hash = hmac.digest('hex');
  res.setHeader('Content-Type', 'application/json');
  res.end(JSON.stringify(req.user));
});
 module.exports = wt.fromExpress(app).auth0();
    </code></pre>
    <p>This tiny script validates your user’s JWT, creates a hash of their e-mail with a secret key stored in environment variables, and returns it in a JSON blob ready to be consumed by the customer’s browser.</p>
    <p>Deploying the script to Webtask.io is dead simple.</p>
    <pre><code>
$ npm install -g wt-cli$ wt init --container "my\_company" --url "https://sandbox.it.auth0.com" -p "default" --auth0$ wt create generate\_ld\_secure\_hash.js \\
 -s AUTH0\_CLIENT\_ID=&lt;auth0\_client\_id&gt; \\
 -s AUTH0\_CLIENT\_SECRET=&lt;auth0\_client\_secret&gt; \\
 -s AUTH0\_DOMAIN=&lt;auth0\_account\_name&gt;.auth0.com \\
 -s AUTH0\_SECRET\_ENCODING=utf8 \\
 -s LD\_SDK\_KEY=<LaunchDarkly SDK="" key=""> \\
 --profile default \\
 --name ld-secure-hash
Webtask createdYou can access your webtask at the following url:[https://your\_company.us.webtask.io/ld-secure-hash-compass-prod](https://mediamath.us.webtask.io/ld-secure-hash-compass-prod)
    &lt;/code&gt;&lt;/pre&gt;
    <p>Now query that URL with a valid JWT, and you’ll see a full response with your secure hash, which you can then hand to the Launch Darkly Javascript SDK.</p>
    <pre><code>
{"email":"felix@example.com","iss":"https://your\_company.auth0.com/","sub":"auth0|1","aud":"2w4EIreeMnopeRkYyMkWw3669P1euhq","iat":1552341211,"exp":1552377211,"ld\_hash":"f71ab9c1sdfa0nope57084f86e1eebe85cfe00a03f28ef192610c8e32cf371b0a3"}var ldclient = LDClient.initialize('YOUR\_CLIENT\_SIDE\_ID', user, options = {
  hash: SERVER\_GENERATED\_HASH
});
    </code></pre>
    <p>Done!</p>
&lt;/section&gt;
</LaunchDarkly></code></pre></section>]]></content><author><name></name></author><category term="Technical" /><summary type="html"><![CDATA[Secure Client Side Feature Flags with Launch Darkly + Auth0 Webtasks March 11, 2019 Feature flags are an essential part of the modern web application. Decoupling the activation of features from deployment means there are fewer things to worry about at deploy time, teams can deliver features to customers, and segment features to specific audiences. Client Side flags present a security problem — what if a user tries to see what feature flags another user has? A poorly named feature flag might describe unreleased features, or worse expose administrative elements to regular users. At MediaMath, we use Launch Darkly for feature flagging. To address the client side flags issue the Launch Darkly Javascript SDK has a Secure Mode feature to only allow users to see flags associated with their accounts. To use Secure Mode conventionally you integrate it into your back end application, exposing an API endpoint to take the user’s name, hash it with a private key, and return it to the client. Sure, this is easy, but why add an unrelated feature to your existing code base when you could leverage your existing authentication provider? Auth0 provides Webtask.io, an AWS Lambda-esque service, for running Javascript. Webtasks come with a lot of batteries included if you use Auth0 as your authentication provider, and can validate users tokens for you. const app = new (require('express'))(); const wt = require('webtask-tools'); const crypto = require('crypto'); // Be sure to specify your SDK key for your environment! app.get('/', (req, res) =&gt; { const hmac = crypto.createHmac('sha256', req.webtaskContext.secrets.LD_SDK_KEY); hmac.update(req.user.email); req.user.ld_hash = hmac.digest('hex'); res.setHeader('Content-Type', 'application/json'); res.end(JSON.stringify(req.user)); }); module.exports = wt.fromExpress(app).auth0(); This tiny script validates your user’s JWT, creates a hash of their e-mail with a secret key stored in environment variables, and returns it in a JSON blob ready to be consumed by the customer’s browser. Deploying the script to Webtask.io is dead simple. $ npm install -g wt-cli$ wt init --container "my\_company" --url "https://sandbox.it.auth0.com" -p "default" --auth0$ wt create generate\_ld\_secure\_hash.js \\ -s AUTH0\_CLIENT\_ID=&lt;auth0\_client\_id&gt; \\ -s AUTH0\_CLIENT\_SECRET=&lt;auth0\_client\_secret&gt; \\ -s AUTH0\_DOMAIN=&lt;auth0\_account\_name&gt;.auth0.com \\ -s AUTH0\_SECRET\_ENCODING=utf8 \\ -s LD\_SDK\_KEY= \\ --profile default \\ --name ld-secure-hash Webtask createdYou can access your webtask at the following url:[https://your\_company.us.webtask.io/ld-secure-hash-compass-prod](https://mediamath.us.webtask.io/ld-secure-hash-compass-prod) &lt;/code&gt;&lt;/pre&gt; Now query that URL with a valid JWT, and you’ll see a full response with your secure hash, which you can then hand to the Launch Darkly Javascript SDK. {"email":"felix@example.com","iss":"https://your\_company.auth0.com/","sub":"auth0|1","aud":"2w4EIreeMnopeRkYyMkWw3669P1euhq","iat":1552341211,"exp":1552377211,"ld\_hash":"f71ab9c1sdfa0nope57084f86e1eebe85cfe00a03f28ef192610c8e32cf371b0a3"}var ldclient = LDClient.initialize('YOUR\_CLIENT\_SIDE\_ID', user, options = { hash: SERVER\_GENERATED\_HASH }); Done! &lt;/section&gt;]]></summary></entry><entry><title type="html">Re: Shentrup’s Land Value Tax Critique</title><link href="http://localhost:4000/social%20choice%20theory/2017/05/04/lvt-response.html" rel="alternate" type="text/html" title="Re: Shentrup’s Land Value Tax Critique" /><published>2017-05-04T00:00:00+01:00</published><updated>2017-05-04T00:00:00+01:00</updated><id>http://localhost:4000/social%20choice%20theory/2017/05/04/lvt-response</id><content type="html" xml:base="http://localhost:4000/social%20choice%20theory/2017/05/04/lvt-response.html"><![CDATA[<section id="article">
    <h2>Re: Shentrup’s Land Value Tax Critique</h2>
    <p><em>May 4, 2017</em></p>
    <p><em>This article is a response to Clay Shentrup’s https://medium.com/@ClayShentrup/land-value-tax-1ce8c743a248</em></p>
    <h3>The Purpose of Tax</h3>
    <p>Clay lists:</p>
    <blockquote>
    <p>There are precisely two reasons for any tax or subsidy. They are:<br />
    1. To directly affect the welfare of the recipient.<br />
    2. To address an externality (Pigovian taxes/subsidies).</p>
    </blockquote>
    <p>This is the foundation of the flaws in his argument against the Land Value Tax. Taxes do not exist to address externalities or affect the welfare of the recipient — they exist to raise money for the government. The government will then re-allocate that money as it sees fit to <em>“form a more perfect Union, establish Justice, insure domestic Tranquility, provide for the common defence, promote the general Welfare, and secure the Blessings of Liberty to ourselves and our Posterity”</em></p>
    <p>Land Value Taxes are not good by themselves. If the services that government provides could be free, we should not have a Land Value Tax. Unfortunately, that’s not the case.</p>
    <p><strong>Land Value Taxes are the least worst arbitrary taxes</strong></p>
    <p>Pigovian taxes and subsidies are ideal, because they cause a societally positive change to behavior. Don’t like pollution? Tax it, and it’ll cost money to pollute. Not a fan of people drinking alcohol, or doing drugs? Tax that, increase the price, and fewer people will trade their time effort and money for booze (or they’ll go to the black market).</p>
    <p>For the sake of argument, let’s implement all reasonable pigovian taxes. We end pollution, nobody smokes or drinks (it’s a boring world). How can we pay for schools, infrastructure, hospitals and defense? The US relies on income, sales, and corporate taxes, with a small margin of property taxes. I’m sure Clay would agree with me that those are inefficient taxes. Income taxes increase costs for firms and lower salaries for workers, as do sales for consumers, and corporate taxes for shareholders. There needs to be a source of government revenue that cannot be avoided by better behavior, but doesn’t distort markets; an arbitrary (meaning not bundled) tax for revenue purposes alone.</p>
    <p>The question is “If taxation is necessary, what is the best way to tax?”</p>
    <p><strong>An Ideal Tax:</strong></p>
    <ol>
        <li>Does not affect the supply and demand of the commodity.</li>
        <li>Should be easily determined and collected.</li>
        <li>Should be consistent and reliable, as to not cause wild swings in government income.</li>
    </ol>
    <h3>A direct refutation of Clay’s arguments</h3>
    <h4>The Specialness of Land</h4>
    <p>Clay ends his article with by addressing the core tenant of the Land Value Tax, by saying that there’s <em>“nothing special about ‘unimproved value of land.’”</em> Land ownership, unlike other commodities, is <em>always</em> a monopoly grant. There are no identical pieces of land, as you cannot have two plots of land in the same place at the same time. The value of an unimproved lot in downtown Manhattan carries far more value than an equivalent lot in North Eastern Iowa. A plot of land’s location and proximity to other items is what gives it value. The elasticity of land supply is fixed — meaning that if more people desire land in an area, then the price of that land must increase. Land can be developed, which will allow it to be better <em>utilized</em>, but the price for the land will remain the same, or increase because of the improvement.</p>
    <h4>The Transaction Example</h4>
    <blockquote>
    <p>Imagine that Bob agrees to sell a parcel of land to Alice for 3M$. But just before they can conduct the transaction, the government imposes a land value tax (LVT) on it.</p>
    <p>The two agree that the LVT has a net present value of 1M$. Thus by taking the land off Bob’s hands, Alice is <em>effectively</em> paying Bob 1M$ in cash. Thus she’ll only pay another 2M$ directly to Bob, for an <em>effective</em> total purchase price of 3M$.</p>
    </blockquote>
    <p>Alice is the one who gets screwed here, if she buys the land for 3M. A Land Value Tax is assessed like a property tax (except it’s not a tax on improvements). The tax occurs yearly. It’s not a transaction tax. If Alice agreed to purchase a place for $3M, and a tax is placed on the property, she will have to pay that tax over time. As the value of the property increases or decreases, so will her taxes. This drastically changes the expected future value of the property. She should renegotiate, or not buy, or change her expectation of the worth of property ownership.</p>
    <p>If this example were realistic, Alice would not sign the deal, and Bob would have to lower his price to find a buyer. Clay says that this makes the tax “arbitrary” — but the goal of the tax is for the government to efficiently raise revenues. It’s arbitrary nature is not a problem. It is fair to acknowledge Bob <em>does get screwed by this.</em> The rules of the game have been fundamentally changed, and not in his favor. Now Bob will have to either sell it for less, or develop the property to provide a benefit — such as building a large housing complex on it, and renting it out. Bob now needs to <em>work for his wealth.</em></p>
    <blockquote>
    <p>Landowners <em>already</em> have an incentive to put their land to the most productive use, or to sell it to someone who <em>can</em> (who will thus be willing to pay more for it than it’s worth to the owner). There is no negative externality here to account for.</p>
    </blockquote>
    <p>Landowners can generate two forms of revenue from their land.<br />
    One is to rent it, earning revenue from derived from businesses on the property.<br />
    The other is to hold it like an asset and wait for it to appreciate. An empty, fenced plot of land appreciates as much value as the skyscraper next door. It may even be more valuable for the reason that it is an open lot and occupied with existing construction. <em>To do this is</em> <em>immoral.</em> It is a blight upon the community to not develop your land to the extent possible. When land owners wait for others to improve around them, the increase in value of their land is a transfer of wealth from those who pay for developments, to the private land owner.<br />
    Land owners who do not develop their land are free riders upon the good nature of others who build and develop a community with vision.</p>
    <p>Land owners have <em>some</em> incentive for their land to be productive. But it is easier and less risky for them to sit and wait for it to appreciate. Many land owners do this unintentionally. Their optimal use may differ from the desires of the community, such as a single family home in a neighborhood of skyscrapers. Land owners have the prerogative to do what they want. It’s up to the community to align their incentives towards development.</p>
    <p>Henry George puts it another (extreme) way. In his view, there is no reason for a land owner to receive <em>any</em> appreciation in value of the land. They can and should build, own and sell the improvements on the land, but the land itself should not appreciate. In lieu of socializing the land, George proposes a proportional tax.</p>
    <p>It’s important for us to recognize that we didn’t make the land. We can build improvements upon it but land itself is not built. Our Government is by the people for the people, representing a geographic area. An area built on land. All products, services, materials, and food are ultimately derived from the bounty of the land. A tax upon the root element of our economy is the best method by which we can fund the collective (rather than individual) needs of our society.</p>
</section>]]></content><author><name></name></author><category term="Social Choice Theory" /><summary type="html"><![CDATA[Re: Shentrup’s Land Value Tax Critique May 4, 2017 This article is a response to Clay Shentrup’s https://medium.com/@ClayShentrup/land-value-tax-1ce8c743a248 The Purpose of Tax Clay lists: There are precisely two reasons for any tax or subsidy. They are: 1. To directly affect the welfare of the recipient. 2. To address an externality (Pigovian taxes/subsidies). This is the foundation of the flaws in his argument against the Land Value Tax. Taxes do not exist to address externalities or affect the welfare of the recipient — they exist to raise money for the government. The government will then re-allocate that money as it sees fit to “form a more perfect Union, establish Justice, insure domestic Tranquility, provide for the common defence, promote the general Welfare, and secure the Blessings of Liberty to ourselves and our Posterity” Land Value Taxes are not good by themselves. If the services that government provides could be free, we should not have a Land Value Tax. Unfortunately, that’s not the case. Land Value Taxes are the least worst arbitrary taxes Pigovian taxes and subsidies are ideal, because they cause a societally positive change to behavior. Don’t like pollution? Tax it, and it’ll cost money to pollute. Not a fan of people drinking alcohol, or doing drugs? Tax that, increase the price, and fewer people will trade their time effort and money for booze (or they’ll go to the black market). For the sake of argument, let’s implement all reasonable pigovian taxes. We end pollution, nobody smokes or drinks (it’s a boring world). How can we pay for schools, infrastructure, hospitals and defense? The US relies on income, sales, and corporate taxes, with a small margin of property taxes. I’m sure Clay would agree with me that those are inefficient taxes. Income taxes increase costs for firms and lower salaries for workers, as do sales for consumers, and corporate taxes for shareholders. There needs to be a source of government revenue that cannot be avoided by better behavior, but doesn’t distort markets; an arbitrary (meaning not bundled) tax for revenue purposes alone. The question is “If taxation is necessary, what is the best way to tax?” An Ideal Tax: Does not affect the supply and demand of the commodity. Should be easily determined and collected. Should be consistent and reliable, as to not cause wild swings in government income. A direct refutation of Clay’s arguments The Specialness of Land Clay ends his article with by addressing the core tenant of the Land Value Tax, by saying that there’s “nothing special about ‘unimproved value of land.’” Land ownership, unlike other commodities, is always a monopoly grant. There are no identical pieces of land, as you cannot have two plots of land in the same place at the same time. The value of an unimproved lot in downtown Manhattan carries far more value than an equivalent lot in North Eastern Iowa. A plot of land’s location and proximity to other items is what gives it value. The elasticity of land supply is fixed — meaning that if more people desire land in an area, then the price of that land must increase. Land can be developed, which will allow it to be better utilized, but the price for the land will remain the same, or increase because of the improvement. The Transaction Example Imagine that Bob agrees to sell a parcel of land to Alice for 3M$. But just before they can conduct the transaction, the government imposes a land value tax (LVT) on it. The two agree that the LVT has a net present value of 1M$. Thus by taking the land off Bob’s hands, Alice is effectively paying Bob 1M$ in cash. Thus she’ll only pay another 2M$ directly to Bob, for an effective total purchase price of 3M$. Alice is the one who gets screwed here, if she buys the land for 3M. A Land Value Tax is assessed like a property tax (except it’s not a tax on improvements). The tax occurs yearly. It’s not a transaction tax. If Alice agreed to purchase a place for $3M, and a tax is placed on the property, she will have to pay that tax over time. As the value of the property increases or decreases, so will her taxes. This drastically changes the expected future value of the property. She should renegotiate, or not buy, or change her expectation of the worth of property ownership. If this example were realistic, Alice would not sign the deal, and Bob would have to lower his price to find a buyer. Clay says that this makes the tax “arbitrary” — but the goal of the tax is for the government to efficiently raise revenues. It’s arbitrary nature is not a problem. It is fair to acknowledge Bob does get screwed by this. The rules of the game have been fundamentally changed, and not in his favor. Now Bob will have to either sell it for less, or develop the property to provide a benefit — such as building a large housing complex on it, and renting it out. Bob now needs to work for his wealth. Landowners already have an incentive to put their land to the most productive use, or to sell it to someone who can (who will thus be willing to pay more for it than it’s worth to the owner). There is no negative externality here to account for. Landowners can generate two forms of revenue from their land. One is to rent it, earning revenue from derived from businesses on the property. The other is to hold it like an asset and wait for it to appreciate. An empty, fenced plot of land appreciates as much value as the skyscraper next door. It may even be more valuable for the reason that it is an open lot and occupied with existing construction. To do this is immoral. It is a blight upon the community to not develop your land to the extent possible. When land owners wait for others to improve around them, the increase in value of their land is a transfer of wealth from those who pay for developments, to the private land owner. Land owners who do not develop their land are free riders upon the good nature of others who build and develop a community with vision. Land owners have some incentive for their land to be productive. But it is easier and less risky for them to sit and wait for it to appreciate. Many land owners do this unintentionally. Their optimal use may differ from the desires of the community, such as a single family home in a neighborhood of skyscrapers. Land owners have the prerogative to do what they want. It’s up to the community to align their incentives towards development. Henry George puts it another (extreme) way. In his view, there is no reason for a land owner to receive any appreciation in value of the land. They can and should build, own and sell the improvements on the land, but the land itself should not appreciate. In lieu of socializing the land, George proposes a proportional tax. It’s important for us to recognize that we didn’t make the land. We can build improvements upon it but land itself is not built. Our Government is by the people for the people, representing a geographic area. An area built on land. All products, services, materials, and food are ultimately derived from the bounty of the land. A tax upon the root element of our economy is the best method by which we can fund the collective (rather than individual) needs of our society.]]></summary></entry><entry><title type="html">Kong for validating Auth0 JWTs</title><link href="http://localhost:4000/technical/2017/04/26/kong-jwt.html" rel="alternate" type="text/html" title="Kong for validating Auth0 JWTs" /><published>2017-04-26T00:00:00+01:00</published><updated>2017-04-26T00:00:00+01:00</updated><id>http://localhost:4000/technical/2017/04/26/kong-jwt</id><content type="html" xml:base="http://localhost:4000/technical/2017/04/26/kong-jwt.html"><![CDATA[<section id="article">
    <h2>Kong for validating Auth0 JWTs</h2>
    <p><em>April 26, 2017</em></p>
    <p>Kong is pretty cool. Auth0 is pretty cool. They should work together. This guide details the fastest way to get your APIs to validate JWT tokens issued by Auth0.</p>
    <h3>Pre-requisites:</h3>
    <ul>
        <li>Create a Auth0 account. The account name is referred to “COMPANYNAME” for the sake of the guide.</li>
        <li>Setup a Kong instance on your machine. This guide assumes a brand new blank instance.</li>
        <li>Install httpie — a http command line utility built for humans (unlike curl).</li>
    </ul>
    <h3>Setup</h3>
    <ol>
        <li>Create an API<br /><code>$ http POST :8001/apis name=example-api hosts=example.com upstream_url=http://httpbin.org</code></li>
        <li>Add the JWT Plugin<br /><code>$ http POST :8001/apis/example-api/plugins name=jwt</code></li>
        <li>Download your Auth0 account certificate<br /><code>$ http https://COMPANYNAME.auth0.com/pem --download</code></li>
        <li>Transform the certificate into a public key.<br /><code>$ openssl x509 -pubkey -noout -in COMPANYNAME.pem &gt; pubkey.pem</code></li>
        <li>Create a consumer with the Auth0 public key<br /><code>$ http post :8001/consumers/adama/jwt algorithm=RS256 rsa_public_key@./pubkey.pem key=https://COMPANYNAME.auth0.com/ -f</code></li>
        <li>Success! Send requests through, only requests with valid tokens will work.<br /><code>$ http GET :8000 Host:example.com Authorization:"Bearer " -v</code></li>
    </ol>
    <p><em>Wow, that looked so simple, why did you write an article about this?</em></p>
    <p>Becuase this is surprisingly obscure. Alternative solutions to Kong involve:</p>
    <p>Integrating your middleware directly into your codebase. This is hell if you have many APIs. You have to audit each library for each programming language. Critical vulnerabilities in these libraries are common.</p>
    <p>You could run a version of Nginx that supports LUA . Or you could sign up for Nginx-Plus.</p>
    <p>Tyk may be a viable alternative, though their JWT documentation appears broken as of publication.</p>
</section>]]></content><author><name></name></author><category term="Technical" /><summary type="html"><![CDATA[Kong for validating Auth0 JWTs April 26, 2017 Kong is pretty cool. Auth0 is pretty cool. They should work together. This guide details the fastest way to get your APIs to validate JWT tokens issued by Auth0. Pre-requisites: Create a Auth0 account. The account name is referred to “COMPANYNAME” for the sake of the guide. Setup a Kong instance on your machine. This guide assumes a brand new blank instance. Install httpie — a http command line utility built for humans (unlike curl). Setup Create an API$ http POST :8001/apis name=example-api hosts=example.com upstream_url=http://httpbin.org Add the JWT Plugin$ http POST :8001/apis/example-api/plugins name=jwt Download your Auth0 account certificate$ http https://COMPANYNAME.auth0.com/pem --download Transform the certificate into a public key.$ openssl x509 -pubkey -noout -in COMPANYNAME.pem &gt; pubkey.pem Create a consumer with the Auth0 public key$ http post :8001/consumers/adama/jwt algorithm=RS256 rsa_public_key@./pubkey.pem key=https://COMPANYNAME.auth0.com/ -f Success! Send requests through, only requests with valid tokens will work.$ http GET :8000 Host:example.com Authorization:"Bearer " -v Wow, that looked so simple, why did you write an article about this? Becuase this is surprisingly obscure. Alternative solutions to Kong involve: Integrating your middleware directly into your codebase. This is hell if you have many APIs. You have to audit each library for each programming language. Critical vulnerabilities in these libraries are common. You could run a version of Nginx that supports LUA . Or you could sign up for Nginx-Plus. Tyk may be a viable alternative, though their JWT documentation appears broken as of publication.]]></summary></entry><entry><title type="html">Q&amp;amp;A with Pragmatic Marketing Magazine</title><link href="http://localhost:4000/2014/08/27/qa-pragmatic-marketing.html" rel="alternate" type="text/html" title="Q&amp;amp;A with Pragmatic Marketing Magazine" /><published>2014-08-27T00:00:00+01:00</published><updated>2014-08-27T00:00:00+01:00</updated><id>http://localhost:4000/2014/08/27/qa-pragmatic-marketing</id><content type="html" xml:base="http://localhost:4000/2014/08/27/qa-pragmatic-marketing.html"><![CDATA[<section id="article">
    <h2>Q&amp;A with Pragmatic Marketing Magazine</h2>
    <p><em>August 27, 2014</em></p>
    <p><a href="http://mediafiles.pragmaticmarketing.com/pdf/PRAGMATICMARKETERSUM2014.pdf#page=5">Read the original here</a></p>
    <p><em>Felix Sargent started his career as a developer and now works at Rackspace as a product manager</em></p>
    <p><strong>How did you become a product manager?</strong><br />
    During one development project, I was the person who ended up facilitating the discussions about what to build and the kind of work that entailed. I worked to create consensus and made sure everyone’s opinions were heard. Afterward, my manager asked me if I wanted to be the product manager. Strangely, I wanted to be a product manager since I was young. My brother, who is 11 years older, moved from England to America to be a software engineer when he was 21. I grew up listening to his horror stories: “I built out this new feature that allows them to release new updates without ever having any downtime and nobody really noticed.” I wanted to be the product manager he never had. That’s molded my personality as I’ve worked.</p>
    <p><strong>Do you fill the role the way you dreamed about back then?</strong><br />
    I love my job and have a passion for doing it, but you would have to ask my teammates what they think about working with me. I think my experience as a developer is really useful, because I can communicate and speak that language. Part of my philosophy as a product manager is that I don’t believe in strict adherence to process, except to provide stability so people know what to do next. When I read the “top 10 ways to organize your backlog,” I think the author is missing the point by not talking to the people and finding out what’s driving them crazy — and then figuring out ways to address those issues.</p>
    <p><strong>Do you and your brother talk shop wHen you get together?</strong><br />
    We wouldn’t work together, because we’d kill each other. But it’s always nice to both complain and learn from each other. He allows me to hear things from a different perspective, and it’s nice to bounce things off each other for feedback.</p>
    <p><strong>Do you ever miss being a developer?</strong><br />
    The nice thing about being a developer is that you know when you’re done. As a software engineer, you just get into a state where you know you’re going to squash a bug and fix things and they’re going to be more perfect. I’ve seen many of my product-management peers become incredibly overworked, because they aim for perfection and don’t know where to stop. There is no such thing as perfection when you’re looking through the backlog. Figuring out what to work on and what not to work on is always a challenging task. It’s impossible to perfect a plan before things change.</p>
    <p><strong>Do you have any advice for anyone who wants to move from development to product management?</strong><br />
    You should prepare for “being busy” to be different. As a software developer, it means you’re always developing. Being busy as a product manager is like being busy as a parent. It comes down to being ready, not about fighting fires. Instead of setting the direction, being a good product manager is really about listening to the direction as others perceive it — and then putting that into a document that can be shared to create a touchstone. You’re codifying the zeitgeist of what the team is doing and what the team needs to work on in the future. In order to do that, you need to be listening.<br />
    I think the best place to start is to know what a bad product manager is. It’s much easier to define than a good one. A bad product manager says, “Do this.” A good product manager says, What do you need me to do?”<br />
    Managing well is like dancing well. There isn’t a series of steps you follow and then you’re done. You need to interact and relate to your partner and environment.</p>
    <p><strong>Do you have any advice for a new product manager?</strong><br />
    Put the kettle on and have some tea. Meetings are often painful, forced, time-boxed, stressful and aggravating. At first, my team and I were doing agile standup meetings, where there’s a time limit, which makes people feel too uncomfortable to discuss much. Developers are only talking about what they’re doing next so that people are on the same page. But being on the same page doesn’t always help. You also need to have a forum where people are relaxed and safe, so they can say if they don’t like something — and see if others are feeling the same way.<br />
    One afternoon, after a morning full of handling my team’s issues, one of my engineers came to me with yet another request.Admittedly, my brain was fried at the time and I needed a reset. I’m English, so 3 p.m. is tea time for me and I find good tea to be both calming and invigorating. It helps clear my mind and set me on a productive path for the rest of the afternoon. I invited my engineer to join me for a pot of tea, and we started discussing the issue he’d brought to my attention.<br />
    We moved from our company kitchen to a set of comfortable couches and talked candidly about the issues. Others wandered over, listened in, aired their own opinions and start solving problems themselves. I poured more tea and put on another pot. As they talked, I found myself hearing them in a new light and finding opportunities where I could make their work easier for them. Sometimes, it was as simple as clarifying priorities and helping them understand deadlines. Other times, it meant working with others in our organization to better use APIs or integrate code. For us, the key to a good standup meeting was sitting down.</p>
</section>]]></content><author><name></name></author><summary type="html"><![CDATA[Q&amp;A with Pragmatic Marketing Magazine August 27, 2014 Read the original here Felix Sargent started his career as a developer and now works at Rackspace as a product manager How did you become a product manager? During one development project, I was the person who ended up facilitating the discussions about what to build and the kind of work that entailed. I worked to create consensus and made sure everyone’s opinions were heard. Afterward, my manager asked me if I wanted to be the product manager. Strangely, I wanted to be a product manager since I was young. My brother, who is 11 years older, moved from England to America to be a software engineer when he was 21. I grew up listening to his horror stories: “I built out this new feature that allows them to release new updates without ever having any downtime and nobody really noticed.” I wanted to be the product manager he never had. That’s molded my personality as I’ve worked. Do you fill the role the way you dreamed about back then? I love my job and have a passion for doing it, but you would have to ask my teammates what they think about working with me. I think my experience as a developer is really useful, because I can communicate and speak that language. Part of my philosophy as a product manager is that I don’t believe in strict adherence to process, except to provide stability so people know what to do next. When I read the “top 10 ways to organize your backlog,” I think the author is missing the point by not talking to the people and finding out what’s driving them crazy — and then figuring out ways to address those issues. Do you and your brother talk shop wHen you get together? We wouldn’t work together, because we’d kill each other. But it’s always nice to both complain and learn from each other. He allows me to hear things from a different perspective, and it’s nice to bounce things off each other for feedback. Do you ever miss being a developer? The nice thing about being a developer is that you know when you’re done. As a software engineer, you just get into a state where you know you’re going to squash a bug and fix things and they’re going to be more perfect. I’ve seen many of my product-management peers become incredibly overworked, because they aim for perfection and don’t know where to stop. There is no such thing as perfection when you’re looking through the backlog. Figuring out what to work on and what not to work on is always a challenging task. It’s impossible to perfect a plan before things change. Do you have any advice for anyone who wants to move from development to product management? You should prepare for “being busy” to be different. As a software developer, it means you’re always developing. Being busy as a product manager is like being busy as a parent. It comes down to being ready, not about fighting fires. Instead of setting the direction, being a good product manager is really about listening to the direction as others perceive it — and then putting that into a document that can be shared to create a touchstone. You’re codifying the zeitgeist of what the team is doing and what the team needs to work on in the future. In order to do that, you need to be listening. I think the best place to start is to know what a bad product manager is. It’s much easier to define than a good one. A bad product manager says, “Do this.” A good product manager says, What do you need me to do?” Managing well is like dancing well. There isn’t a series of steps you follow and then you’re done. You need to interact and relate to your partner and environment. Do you have any advice for a new product manager? Put the kettle on and have some tea. Meetings are often painful, forced, time-boxed, stressful and aggravating. At first, my team and I were doing agile standup meetings, where there’s a time limit, which makes people feel too uncomfortable to discuss much. Developers are only talking about what they’re doing next so that people are on the same page. But being on the same page doesn’t always help. You also need to have a forum where people are relaxed and safe, so they can say if they don’t like something — and see if others are feeling the same way. One afternoon, after a morning full of handling my team’s issues, one of my engineers came to me with yet another request.Admittedly, my brain was fried at the time and I needed a reset. I’m English, so 3 p.m. is tea time for me and I find good tea to be both calming and invigorating. It helps clear my mind and set me on a productive path for the rest of the afternoon. I invited my engineer to join me for a pot of tea, and we started discussing the issue he’d brought to my attention. We moved from our company kitchen to a set of comfortable couches and talked candidly about the issues. Others wandered over, listened in, aired their own opinions and start solving problems themselves. I poured more tea and put on another pot. As they talked, I found myself hearing them in a new light and finding opportunities where I could make their work easier for them. Sometimes, it was as simple as clarifying priorities and helping them understand deadlines. Other times, it meant working with others in our organization to better use APIs or integrate code. For us, the key to a good standup meeting was sitting down.]]></summary></entry></feed>